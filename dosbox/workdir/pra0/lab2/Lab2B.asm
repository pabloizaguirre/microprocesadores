;**************************************************************************
; MBS 2021. LABORATORY ASSIGNMENT 2
; Author: PABLO IZAGUIRRE GARCIA
; Group: 2291
; Task: 1
;**************************************************************************

; DATA SEGMENT DEFINITION
DATA SEGMENT
    ; VECTOR DEFINITION
    vector1         DB 1,2,0,4
    vector2         DB 4,-2,2,1
    vector3         DB 0,2,0,-1
    vectorAux       DB ?,?,?,?
    errorDuplicated     DB "Duplicated", 13, 10, '$'
    correctOutput   DB "Correct", 13, 10, '$'
DATA ENDS

;**************************************************************************
; STACK SEGMENT DEFINITION
STACKSEG SEGMENT STACK "STACK"
    DB 40H DUP (0) ; initialization example, 64 bytes initialize to 0
STACKSEG ENDS

;**************************************************************************
; EXTRA SEGMENT DEFINITION
EXTRA SEGMENT
    RESULT DW 0,0 ; initialization example. 2 WORDS (4 BYTES)
EXTRA ENDS
;************************************************************************** 


; CODE SEGMENT DEFINITION
CODE SEGMENT
ASSUME CS: CODE, DS: DATA, ES: EXTRA, SS: STACKSEG
; BEGINNING OF MAIN PROCEDURE
BEGIN PROC
    ; INITIALIZE THE SEGMENT REGISTER WITH ITS VALUE
    MOV AX, DATA
    MOV DS, AX
    MOV AX, STACKSEG
    MOV SS, AX
    MOV AX, EXTRA
    MOV ES, AX
    MOV SP, 64 ; LOAD A STACK POINTER WITH THE HIGHEST VALUE
    ; END OF INITIALIZATIONS
    ; BEGINNING OF THE PROGRAMME

    ; BX REPRESENTS WHICH VECTOR THE PROGRAMME IS ANALYZING
    MOV BX, 0
IR:
    ; SI INDICATES THE INDEX INSIDE THE VECTOR
    MOV SI, 0
IR2:
    ; DI INDICATES THE INDEX OF THE ELEMENTS INSIDE OF THE VECTOR WHERE WE STORE THE NUMBERS ALREADY USED
    MOV DI, SI
    ; WE STORE THE CURRENT NUMBER IN AH
    MOV AH, vector1[BX][SI]
CHECK_DUPES:
    DEC DI
    ; IF DI IS EQUAL TO -1, THEN THE AUXILIARY VECTOR HAS BEEN CHECKED COMPLETELY AND NO DUPLICATE HAS BEEN FOUND
    CMP DI, -1
    JE CORRECT
    ; COMPARATION OF THE VALUE WITH EACH OF THE PREVIOUS ONES
    CMP vectorAux[DI], AH
    JNE CHECK_DUPES
    ; IF THERE WAS A DUPLICATE WE PRINT THE DUPLICATE MESSAGE AND PROCEED TO ANALYZE THE NEXT VECTOR
    CALL PRINTDUP
    JMP NEXTVECTOR

CORRECT:
    ; THE ANALYZED NUMBER IS STORED IN THE AUXILIARY VECTOR
    MOV vectorAux[SI], AH
    ; WE CHECK IF THE WHOLE VECTOR HAS BEEN ANALYZED 
    INC SI
    CMP SI, 4
    JNE IR2
    ; IF THE PROGRAMME REACHES THIS POINT, IT MEANS THAT VECTOR[BX] IS CORRECT
    ; WE PRINT CORRECT
    CALL PRINTCORRECT

NEXTVECTOR:
    ; WE LOOK AT THE NEXT VECTOR (BX IS INCREASED BY 4 BECAUSE THATS THE SIZE OF EACH VECTOR)
    ADD BX, 4
    ; IF THERE ARE STILL MORE VECTORS TO CHECK, THE PROGRAMME JUMPS TO IR
    CMP BX, 12
    JNE IR

    ; END OF THE PROGRAMME
    MOV AX, 4C00H
    INT 21H
BEGIN ENDP
; SPACE FOR SUBROUTINES

; THIS SUBROUTINE PRINTS THE DUPLICATED MESSAGE
PRINTDUP PROC NEAR
    MOV AH, 9
    MOV DX, OFFSET errorDuplicated
    INT 21H
    RET
PRINTDUP ENDP

; THIS SUBROUTINE PRINTS THE DUPLICATED MESSAGE
PRINTCORRECT PROC NEAR
    MOV AH, 9
    MOV DX, OFFSET correctOutput
    INT 21H
    RET
PRINTCORRECT ENDP

; END OF THE CODE SEGMENT
CODE ENDS
; END OF THE PROGRAMME POINTING OUT WHERE THE EXECUTION BEGINS
END BEGIN